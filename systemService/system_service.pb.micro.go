// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: systemService/system_service.proto

package systemService

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SystemService service

func NewSystemServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SystemService service

type SystemService interface {
	GetMessageArea(ctx context.Context, in *MessageAreaDTO, opts ...client.CallOption) (*common.Response, error)
}

type systemService struct {
	c    client.Client
	name string
}

func NewSystemService(name string, c client.Client) SystemService {
	return &systemService{
		c:    c,
		name: name,
	}
}

func (c *systemService) GetMessageArea(ctx context.Context, in *MessageAreaDTO, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "SystemService.GetMessageArea", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SystemService service

type SystemServiceHandler interface {
	GetMessageArea(context.Context, *MessageAreaDTO, *common.Response) error
}

func RegisterSystemServiceHandler(s server.Server, hdlr SystemServiceHandler, opts ...server.HandlerOption) error {
	type systemService interface {
		GetMessageArea(ctx context.Context, in *MessageAreaDTO, out *common.Response) error
	}
	type SystemService struct {
		systemService
	}
	h := &systemServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SystemService{h}, opts...))
}

type systemServiceHandler struct {
	SystemServiceHandler
}

func (h *systemServiceHandler) GetMessageArea(ctx context.Context, in *MessageAreaDTO, out *common.Response) error {
	return h.SystemServiceHandler.GetMessageArea(ctx, in, out)
}
